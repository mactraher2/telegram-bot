from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
import asyncio

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "7990352253:AAGgE_fSAQKhjRQ7GeL_6jKp123X8YJcQVw"
ADMIN_USERNAME = "squezzzzzz"

# --- –ü–ª–∞–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def delete_message_smoothly(bot, chat_id, message_id):
    try:
        await asyncio.sleep(0.5)  # –∏–º–∏—Ç–∞—Ü–∏—è "–ø–ª–∞–≤–Ω–æ—Å—Ç–∏"
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_message_smoothly(context.bot, update.effective_chat.id, update.message.message_id)

    keyboard = [
        [
            InlineKeyboardButton("Catalog", callback_data="catalog"),
            InlineKeyboardButton("MyOffer", callback_data="myoffer")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open("start.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption="""–£-–£-–£-–ê-–ê-–ê-–ê-–ê-–êü¶ç\n–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –ú–∞—Ä—Ç—ã—à–∫–∞! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–ò–î –ø–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º!

–°–µ–≥–æ–¥–Ω—è (–∏ –Ω–∞–≤—Å–µ–≥–¥–∞) —Å –≤–∞–º–∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Å–ø–æ–Ω—Å–æ—Ä –≤–∞—à–∏—Ö –∫–∞–ø—Ä–∏–∑–æ–≤, —á–µ–ª–æ–≤–µ–∫ –∏—Å–ø–æ–ª–Ω—è—é—â–∏–π –∂–µ–ª–∞–Ω–∏—è,  –∞–º–±–∞—Å—Å–∞–¥–æ—Ä —Ñ–∏—Ä–º—ã \"–ú–º–º–º–∞—Ç–∏–≤–∞—Ü–∏—è –µ—Å—Ç—å –≤—Å–∏–≥–¥–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞!\", –≤–µ–ª–∏—á–∞–π—à–∏–∏–∏–∏–∏–π...... –≠—Ä—Ä—Ä—Ä–±–æ–ª–ª–ª–ª–ª–ª!ü¶Å\n\n–í –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á–µ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å! –°–∫–æ—Ä–µ–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—à–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É! –í–∞—à –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞–π–¥–µ—Ç–µ —á–µ–≥–æ –∏—Å–∫–∞–ª–∏, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /myoffer –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ!\n\nP.s. –¥–∞–Ω–Ω—ã–π –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ, –∞ —Ç–∞–∫–∂–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –∏ –µ–≥–æ –Ω–µ –æ–±–∏–∂–∞—é—Ç –∏ –Ω–µ –±—å—é—Ç...)""",
            reply_markup=reply_markup
        )

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_message_smoothly(context.bot, update.effective_chat.id, update.message.message_id)

    keyboard = [
        [
            InlineKeyboardButton("/start", callback_data="start"),
            InlineKeyboardButton("/myoffer", callback_data="myoffer"),
        ],
        [
            InlineKeyboardButton("/help", callback_data="help"),
            InlineKeyboardButton("/catalog", callback_data="catalog"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open("help.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption="""/start - –£-–£-–£-–ê-–ê-–ê-–ê-–ê-–êü¶ç\n/myoffer - –¥–æ–±–µ–π –º–µ–Ω—è, –µ—Å–ª–∏ —Å–º–æ–∂–µ—à—å!!! (—à—É—Ç–∫–∞–∞–∞–∞–∞)\n/help - —Ç—ã —É–∂–µ –∑–¥–µ—Å—å, –Ω–µ –ø–∞–Ω–∏–∫—É–π üòø\n/catalog - –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å, –±—ç–π–±–∞üòè""",
            reply_markup=reply_markup
        )

# --- –ö–æ–º–∞–Ω–¥–∞ /myoffer ---
async def myoffer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update, 'message') and update.message:
        await delete_message_smoothly(context.bot, update.effective_chat.id, update.message.message_id)
    elif hasattr(update, 'callback_query'):
        await update.callback_query.message.delete()

    with open("offer.jpg", "rb") as photo:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption="–ù–∞–ø–∏—à–∏ —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–≤–æ–µ.....–∂–µ–ª–∞–Ω–∏–µ....!"
        )
    context.user_data['awaiting_offer'] = True

# --- –ö–æ–º–∞–Ω–¥–∞ /catalog ---
async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update, 'message') and update.message:
        await delete_message_smoothly(context.bot, update.effective_chat.id, update.message.message_id)
    elif hasattr(update, 'callback_query'):
        await update.callback_query.message.delete()
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–≤ —Ä–∞–±–æ—Ç–µ")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start":
        await start(update, context)
    elif query.data == "myoffer":
        await myoffer(update, context)
    elif query.data == "help":
        await help_command(update, context)
    elif query.data == "catalog":
        await catalog(update, context)
    elif query.data == "pay":
        await query.message.reply_text("–ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –≤–∞–º –æ–±–æ–π–¥–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–π –∏ –æ—á–µ–Ω—å —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π —Å –æ–±—ä—è—Ç–∏—è–º–∏)")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_offer'):
        user_text = update.message.text
        await delete_message_smoothly(context.bot, update.effective_chat.id, update.message.message_id)

        if update.effective_user.username != ADMIN_USERNAME:
            await context.bot.send_message(
                chat_id=f"@{ADMIN_USERNAME}",
                text=f"–ù–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –æ—Ç @{update.effective_user.username or update.effective_user.id}:\n{user_text}"
            )

        with open("pay.jpg", "rb") as photo:
            keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å...üòè", callback_data="pay")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                reply_markup=reply_markup
            )

        context.user_data['awaiting_offer'] = False

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("myoffer", myoffer))
app.add_handler(CommandHandler("catalog", catalog))
app.add_handler(CallbackQueryHandler(button))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
